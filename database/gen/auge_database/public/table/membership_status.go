//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MembershipStatus = newMembershipStatusTable("public", "membership_status", "")

type membershipStatusTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Description postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MembershipStatusTable struct {
	membershipStatusTable

	EXCLUDED membershipStatusTable
}

// AS creates new MembershipStatusTable with assigned alias
func (a MembershipStatusTable) AS(alias string) *MembershipStatusTable {
	return newMembershipStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MembershipStatusTable with assigned schema name
func (a MembershipStatusTable) FromSchema(schemaName string) *MembershipStatusTable {
	return newMembershipStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MembershipStatusTable with assigned table prefix
func (a MembershipStatusTable) WithPrefix(prefix string) *MembershipStatusTable {
	return newMembershipStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MembershipStatusTable with assigned table suffix
func (a MembershipStatusTable) WithSuffix(suffix string) *MembershipStatusTable {
	return newMembershipStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMembershipStatusTable(schemaName, tableName, alias string) *MembershipStatusTable {
	return &MembershipStatusTable{
		membershipStatusTable: newMembershipStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newMembershipStatusTableImpl("", "excluded", ""),
	}
}

func newMembershipStatusTableImpl(schemaName, tableName, alias string) membershipStatusTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		DescriptionColumn = postgres.StringColumn("description")
		allColumns        = postgres.ColumnList{IDColumn, DescriptionColumn}
		mutableColumns    = postgres.ColumnList{DescriptionColumn}
	)

	return membershipStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
