//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/postgres"
)

var Employee = newEmployeeTable()

type employeeTable struct {
	postgres.Table

	//Columns
	ID       postgres.ColumnString
	Name     postgres.ColumnString
	Birthday postgres.ColumnDate

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmployeeTable struct {
	employeeTable

	EXCLUDED employeeTable
}

// AS creates new EmployeeTable with assigned alias
func (a *EmployeeTable) AS(alias string) *EmployeeTable {
	aliasTable := newEmployeeTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newEmployeeTable() *EmployeeTable {
	return &EmployeeTable{
		employeeTable: newEmployeeTableImpl("public", "employee"),
		EXCLUDED:      newEmployeeTableImpl("", "excluded"),
	}
}

func newEmployeeTableImpl(schemaName, tableName string) employeeTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		NameColumn     = postgres.StringColumn("name")
		BirthdayColumn = postgres.DateColumn("birthday")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, BirthdayColumn}
		mutableColumns = postgres.ColumnList{NameColumn, BirthdayColumn}
	)

	return employeeTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		Birthday: BirthdayColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
