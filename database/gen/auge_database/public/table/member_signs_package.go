//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MemberSignsPackage = newMemberSignsPackageTable("public", "member_signs_package", "")

type memberSignsPackageTable struct {
	postgres.Table

	// Columns
	IDMember         postgres.ColumnString
	IDPackageType    postgres.ColumnInteger
	ValidityInMonths postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MemberSignsPackageTable struct {
	memberSignsPackageTable

	EXCLUDED memberSignsPackageTable
}

// AS creates new MemberSignsPackageTable with assigned alias
func (a MemberSignsPackageTable) AS(alias string) *MemberSignsPackageTable {
	return newMemberSignsPackageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MemberSignsPackageTable with assigned schema name
func (a MemberSignsPackageTable) FromSchema(schemaName string) *MemberSignsPackageTable {
	return newMemberSignsPackageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MemberSignsPackageTable with assigned table prefix
func (a MemberSignsPackageTable) WithPrefix(prefix string) *MemberSignsPackageTable {
	return newMemberSignsPackageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MemberSignsPackageTable with assigned table suffix
func (a MemberSignsPackageTable) WithSuffix(suffix string) *MemberSignsPackageTable {
	return newMemberSignsPackageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMemberSignsPackageTable(schemaName, tableName, alias string) *MemberSignsPackageTable {
	return &MemberSignsPackageTable{
		memberSignsPackageTable: newMemberSignsPackageTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newMemberSignsPackageTableImpl("", "excluded", ""),
	}
}

func newMemberSignsPackageTableImpl(schemaName, tableName, alias string) memberSignsPackageTable {
	var (
		IDMemberColumn         = postgres.StringColumn("id_member")
		IDPackageTypeColumn    = postgres.IntegerColumn("id_package_type")
		ValidityInMonthsColumn = postgres.IntegerColumn("validity_in_months")
		allColumns             = postgres.ColumnList{IDMemberColumn, IDPackageTypeColumn, ValidityInMonthsColumn}
		mutableColumns         = postgres.ColumnList{}
	)

	return memberSignsPackageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDMember:         IDMemberColumn,
		IDPackageType:    IDPackageTypeColumn,
		ValidityInMonths: ValidityInMonthsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
