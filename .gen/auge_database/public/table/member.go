//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Member = newMemberTable("public", "member", "")

type memberTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	Name               postgres.ColumnString
	Sex                postgres.ColumnString
	Email              postgres.ColumnString
	IDMembershipStatus postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MemberTable struct {
	memberTable

	EXCLUDED memberTable
}

// AS creates new MemberTable with assigned alias
func (a MemberTable) AS(alias string) *MemberTable {
	return newMemberTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MemberTable with assigned schema name
func (a MemberTable) FromSchema(schemaName string) *MemberTable {
	return newMemberTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MemberTable with assigned table prefix
func (a MemberTable) WithPrefix(prefix string) *MemberTable {
	return newMemberTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MemberTable with assigned table suffix
func (a MemberTable) WithSuffix(suffix string) *MemberTable {
	return newMemberTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMemberTable(schemaName, tableName, alias string) *MemberTable {
	return &MemberTable{
		memberTable: newMemberTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newMemberTableImpl("", "excluded", ""),
	}
}

func newMemberTableImpl(schemaName, tableName, alias string) memberTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		NameColumn               = postgres.StringColumn("name")
		SexColumn                = postgres.StringColumn("sex")
		EmailColumn              = postgres.StringColumn("email")
		IDMembershipStatusColumn = postgres.FloatColumn("id_membership_status")
		allColumns               = postgres.ColumnList{IDColumn, NameColumn, SexColumn, EmailColumn, IDMembershipStatusColumn}
		mutableColumns           = postgres.ColumnList{NameColumn, SexColumn, EmailColumn, IDMembershipStatusColumn}
	)

	return memberTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Name:               NameColumn,
		Sex:                SexColumn,
		Email:              EmailColumn,
		IDMembershipStatus: IDMembershipStatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
