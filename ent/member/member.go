// Code generated by ent, DO NOT EDIT.

package member

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the member type in the database.
	Label = "member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeEmergencycontact holds the string denoting the emergencycontact edge name in mutations.
	EdgeEmergencycontact = "emergencycontact"
	// Table holds the table name of the member in the database.
	Table = "members"
	// EmergencycontactTable is the table that holds the emergencycontact relation/edge.
	EmergencycontactTable = "emergency_contacts"
	// EmergencycontactInverseTable is the table name for the EmergencyContact entity.
	// It exists in this package in order to avoid circular dependency with the "emergencycontact" package.
	EmergencycontactInverseTable = "emergency_contacts"
	// EmergencycontactColumn is the table column denoting the emergencycontact relation/edge.
	EmergencycontactColumn = "member_emergencycontact"
)

// Columns holds all SQL columns for member fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSex,
	FieldEmail,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)

// OrderOption defines the ordering options for the Member queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmergencycontactField orders the results by emergencycontact field.
func ByEmergencycontactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmergencycontactStep(), sql.OrderByField(field, opts...))
	}
}
func newEmergencycontactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmergencycontactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmergencycontactTable, EmergencycontactColumn),
	)
}
