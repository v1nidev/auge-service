// Code generated by ent, DO NOT EDIT.

package emergencycontact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/v1nidev/auge-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldLTE(FieldID, id))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEQ(FieldPhoneNumber, v))
}

// ContactName applies equality check predicate on the "contact_name" field. It's identical to ContactNameEQ.
func ContactName(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEQ(FieldContactName, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// ContactNameEQ applies the EQ predicate on the "contact_name" field.
func ContactNameEQ(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEQ(FieldContactName, v))
}

// ContactNameNEQ applies the NEQ predicate on the "contact_name" field.
func ContactNameNEQ(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldNEQ(FieldContactName, v))
}

// ContactNameIn applies the In predicate on the "contact_name" field.
func ContactNameIn(vs ...string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldIn(FieldContactName, vs...))
}

// ContactNameNotIn applies the NotIn predicate on the "contact_name" field.
func ContactNameNotIn(vs ...string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldNotIn(FieldContactName, vs...))
}

// ContactNameGT applies the GT predicate on the "contact_name" field.
func ContactNameGT(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldGT(FieldContactName, v))
}

// ContactNameGTE applies the GTE predicate on the "contact_name" field.
func ContactNameGTE(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldGTE(FieldContactName, v))
}

// ContactNameLT applies the LT predicate on the "contact_name" field.
func ContactNameLT(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldLT(FieldContactName, v))
}

// ContactNameLTE applies the LTE predicate on the "contact_name" field.
func ContactNameLTE(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldLTE(FieldContactName, v))
}

// ContactNameContains applies the Contains predicate on the "contact_name" field.
func ContactNameContains(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldContains(FieldContactName, v))
}

// ContactNameHasPrefix applies the HasPrefix predicate on the "contact_name" field.
func ContactNameHasPrefix(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldHasPrefix(FieldContactName, v))
}

// ContactNameHasSuffix applies the HasSuffix predicate on the "contact_name" field.
func ContactNameHasSuffix(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldHasSuffix(FieldContactName, v))
}

// ContactNameEqualFold applies the EqualFold predicate on the "contact_name" field.
func ContactNameEqualFold(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldEqualFold(FieldContactName, v))
}

// ContactNameContainsFold applies the ContainsFold predicate on the "contact_name" field.
func ContactNameContainsFold(v string) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.FieldContainsFold(FieldContactName, v))
}

// HasReferrer applies the HasEdge predicate on the "referrer" edge.
func HasReferrer() predicate.EmergencyContact {
	return predicate.EmergencyContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ReferrerTable, ReferrerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferrerWith applies the HasEdge predicate on the "referrer" edge with a given conditions (other predicates).
func HasReferrerWith(preds ...predicate.Member) predicate.EmergencyContact {
	return predicate.EmergencyContact(func(s *sql.Selector) {
		step := newReferrerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmergencyContact) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmergencyContact) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmergencyContact) predicate.EmergencyContact {
	return predicate.EmergencyContact(sql.NotPredicates(p))
}
