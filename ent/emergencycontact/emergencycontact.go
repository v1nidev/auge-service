// Code generated by ent, DO NOT EDIT.

package emergencycontact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the emergencycontact type in the database.
	Label = "emergency_contact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldContactName holds the string denoting the contact_name field in the database.
	FieldContactName = "contact_name"
	// EdgeReferrer holds the string denoting the referrer edge name in mutations.
	EdgeReferrer = "referrer"
	// Table holds the table name of the emergencycontact in the database.
	Table = "emergency_contacts"
	// ReferrerTable is the table that holds the referrer relation/edge.
	ReferrerTable = "emergency_contacts"
	// ReferrerInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	ReferrerInverseTable = "members"
	// ReferrerColumn is the table column denoting the referrer relation/edge.
	ReferrerColumn = "member_emergencycontact"
)

// Columns holds all SQL columns for emergencycontact fields.
var Columns = []string{
	FieldID,
	FieldPhoneNumber,
	FieldContactName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "emergency_contacts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"member_emergencycontact",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
)

// OrderOption defines the ordering options for the EmergencyContact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByContactName orders the results by the contact_name field.
func ByContactName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactName, opts...).ToFunc()
}

// ByReferrerField orders the results by referrer field.
func ByReferrerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferrerStep(), sql.OrderByField(field, opts...))
	}
}
func newReferrerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferrerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ReferrerTable, ReferrerColumn),
	)
}
