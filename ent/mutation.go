// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/v1nidev/auge-service/ent/emergencycontact"
	"github.com/v1nidev/auge-service/ent/member"
	"github.com/v1nidev/auge-service/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEmergencyContact = "EmergencyContact"
	TypeMember           = "Member"
)

// EmergencyContactMutation represents an operation that mutates the EmergencyContact nodes in the graph.
type EmergencyContactMutation struct {
	config
	op              Op
	typ             string
	id              *int
	phone_number    *string
	contact_name    *string
	clearedFields   map[string]struct{}
	referrer        *int
	clearedreferrer bool
	done            bool
	oldValue        func(context.Context) (*EmergencyContact, error)
	predicates      []predicate.EmergencyContact
}

var _ ent.Mutation = (*EmergencyContactMutation)(nil)

// emergencycontactOption allows management of the mutation configuration using functional options.
type emergencycontactOption func(*EmergencyContactMutation)

// newEmergencyContactMutation creates new mutation for the EmergencyContact entity.
func newEmergencyContactMutation(c config, op Op, opts ...emergencycontactOption) *EmergencyContactMutation {
	m := &EmergencyContactMutation{
		config:        c,
		op:            op,
		typ:           TypeEmergencyContact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmergencyContactID sets the ID field of the mutation.
func withEmergencyContactID(id int) emergencycontactOption {
	return func(m *EmergencyContactMutation) {
		var (
			err   error
			once  sync.Once
			value *EmergencyContact
		)
		m.oldValue = func(ctx context.Context) (*EmergencyContact, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmergencyContact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmergencyContact sets the old EmergencyContact of the mutation.
func withEmergencyContact(node *EmergencyContact) emergencycontactOption {
	return func(m *EmergencyContactMutation) {
		m.oldValue = func(context.Context) (*EmergencyContact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmergencyContactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmergencyContactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmergencyContactMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmergencyContactMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmergencyContact.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhoneNumber sets the "phone_number" field.
func (m *EmergencyContactMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *EmergencyContactMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the EmergencyContact entity.
// If the EmergencyContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmergencyContactMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *EmergencyContactMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetContactName sets the "contact_name" field.
func (m *EmergencyContactMutation) SetContactName(s string) {
	m.contact_name = &s
}

// ContactName returns the value of the "contact_name" field in the mutation.
func (m *EmergencyContactMutation) ContactName() (r string, exists bool) {
	v := m.contact_name
	if v == nil {
		return
	}
	return *v, true
}

// OldContactName returns the old "contact_name" field's value of the EmergencyContact entity.
// If the EmergencyContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmergencyContactMutation) OldContactName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactName: %w", err)
	}
	return oldValue.ContactName, nil
}

// ResetContactName resets all changes to the "contact_name" field.
func (m *EmergencyContactMutation) ResetContactName() {
	m.contact_name = nil
}

// SetReferrerID sets the "referrer" edge to the Member entity by id.
func (m *EmergencyContactMutation) SetReferrerID(id int) {
	m.referrer = &id
}

// ClearReferrer clears the "referrer" edge to the Member entity.
func (m *EmergencyContactMutation) ClearReferrer() {
	m.clearedreferrer = true
}

// ReferrerCleared reports if the "referrer" edge to the Member entity was cleared.
func (m *EmergencyContactMutation) ReferrerCleared() bool {
	return m.clearedreferrer
}

// ReferrerID returns the "referrer" edge ID in the mutation.
func (m *EmergencyContactMutation) ReferrerID() (id int, exists bool) {
	if m.referrer != nil {
		return *m.referrer, true
	}
	return
}

// ReferrerIDs returns the "referrer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReferrerID instead. It exists only for internal usage by the builders.
func (m *EmergencyContactMutation) ReferrerIDs() (ids []int) {
	if id := m.referrer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReferrer resets all changes to the "referrer" edge.
func (m *EmergencyContactMutation) ResetReferrer() {
	m.referrer = nil
	m.clearedreferrer = false
}

// Where appends a list predicates to the EmergencyContactMutation builder.
func (m *EmergencyContactMutation) Where(ps ...predicate.EmergencyContact) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmergencyContactMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmergencyContactMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmergencyContact, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmergencyContactMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmergencyContactMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmergencyContact).
func (m *EmergencyContactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmergencyContactMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.phone_number != nil {
		fields = append(fields, emergencycontact.FieldPhoneNumber)
	}
	if m.contact_name != nil {
		fields = append(fields, emergencycontact.FieldContactName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmergencyContactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emergencycontact.FieldPhoneNumber:
		return m.PhoneNumber()
	case emergencycontact.FieldContactName:
		return m.ContactName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmergencyContactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emergencycontact.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case emergencycontact.FieldContactName:
		return m.OldContactName(ctx)
	}
	return nil, fmt.Errorf("unknown EmergencyContact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmergencyContactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emergencycontact.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case emergencycontact.FieldContactName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactName(v)
		return nil
	}
	return fmt.Errorf("unknown EmergencyContact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmergencyContactMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmergencyContactMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmergencyContactMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmergencyContact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmergencyContactMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmergencyContactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmergencyContactMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmergencyContact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmergencyContactMutation) ResetField(name string) error {
	switch name {
	case emergencycontact.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case emergencycontact.FieldContactName:
		m.ResetContactName()
		return nil
	}
	return fmt.Errorf("unknown EmergencyContact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmergencyContactMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.referrer != nil {
		edges = append(edges, emergencycontact.EdgeReferrer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmergencyContactMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emergencycontact.EdgeReferrer:
		if id := m.referrer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmergencyContactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmergencyContactMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmergencyContactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedreferrer {
		edges = append(edges, emergencycontact.EdgeReferrer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmergencyContactMutation) EdgeCleared(name string) bool {
	switch name {
	case emergencycontact.EdgeReferrer:
		return m.clearedreferrer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmergencyContactMutation) ClearEdge(name string) error {
	switch name {
	case emergencycontact.EdgeReferrer:
		m.ClearReferrer()
		return nil
	}
	return fmt.Errorf("unknown EmergencyContact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmergencyContactMutation) ResetEdge(name string) error {
	switch name {
	case emergencycontact.EdgeReferrer:
		m.ResetReferrer()
		return nil
	}
	return fmt.Errorf("unknown EmergencyContact edge %s", name)
}

// MemberMutation represents an operation that mutates the Member nodes in the graph.
type MemberMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	sex                     *string
	email                   *string
	clearedFields           map[string]struct{}
	emergencycontact        *int
	clearedemergencycontact bool
	done                    bool
	oldValue                func(context.Context) (*Member, error)
	predicates              []predicate.Member
}

var _ ent.Mutation = (*MemberMutation)(nil)

// memberOption allows management of the mutation configuration using functional options.
type memberOption func(*MemberMutation)

// newMemberMutation creates new mutation for the Member entity.
func newMemberMutation(c config, op Op, opts ...memberOption) *MemberMutation {
	m := &MemberMutation{
		config:        c,
		op:            op,
		typ:           TypeMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemberID sets the ID field of the mutation.
func withMemberID(id int) memberOption {
	return func(m *MemberMutation) {
		var (
			err   error
			once  sync.Once
			value *Member
		)
		m.oldValue = func(ctx context.Context) (*Member, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Member.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMember sets the old Member of the mutation.
func withMember(node *Member) memberOption {
	return func(m *MemberMutation) {
		m.oldValue = func(context.Context) (*Member, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemberMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Member.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MemberMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MemberMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MemberMutation) ResetName() {
	m.name = nil
}

// SetSex sets the "sex" field.
func (m *MemberMutation) SetSex(s string) {
	m.sex = &s
}

// Sex returns the value of the "sex" field in the mutation.
func (m *MemberMutation) Sex() (r string, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldSex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// ResetSex resets all changes to the "sex" field.
func (m *MemberMutation) ResetSex() {
	m.sex = nil
}

// SetEmail sets the "email" field.
func (m *MemberMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MemberMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Member entity.
// If the Member object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemberMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *MemberMutation) ResetEmail() {
	m.email = nil
}

// SetEmergencycontactID sets the "emergencycontact" edge to the EmergencyContact entity by id.
func (m *MemberMutation) SetEmergencycontactID(id int) {
	m.emergencycontact = &id
}

// ClearEmergencycontact clears the "emergencycontact" edge to the EmergencyContact entity.
func (m *MemberMutation) ClearEmergencycontact() {
	m.clearedemergencycontact = true
}

// EmergencycontactCleared reports if the "emergencycontact" edge to the EmergencyContact entity was cleared.
func (m *MemberMutation) EmergencycontactCleared() bool {
	return m.clearedemergencycontact
}

// EmergencycontactID returns the "emergencycontact" edge ID in the mutation.
func (m *MemberMutation) EmergencycontactID() (id int, exists bool) {
	if m.emergencycontact != nil {
		return *m.emergencycontact, true
	}
	return
}

// EmergencycontactIDs returns the "emergencycontact" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmergencycontactID instead. It exists only for internal usage by the builders.
func (m *MemberMutation) EmergencycontactIDs() (ids []int) {
	if id := m.emergencycontact; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmergencycontact resets all changes to the "emergencycontact" edge.
func (m *MemberMutation) ResetEmergencycontact() {
	m.emergencycontact = nil
	m.clearedemergencycontact = false
}

// Where appends a list predicates to the MemberMutation builder.
func (m *MemberMutation) Where(ps ...predicate.Member) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Member, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Member).
func (m *MemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemberMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, member.FieldName)
	}
	if m.sex != nil {
		fields = append(fields, member.FieldSex)
	}
	if m.email != nil {
		fields = append(fields, member.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case member.FieldName:
		return m.Name()
	case member.FieldSex:
		return m.Sex()
	case member.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case member.FieldName:
		return m.OldName(ctx)
	case member.FieldSex:
		return m.OldSex(ctx)
	case member.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Member field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case member.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case member.FieldSex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case member.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Member numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Member nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemberMutation) ResetField(name string) error {
	switch name {
	case member.FieldName:
		m.ResetName()
		return nil
	case member.FieldSex:
		m.ResetSex()
		return nil
	case member.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown Member field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.emergencycontact != nil {
		edges = append(edges, member.EdgeEmergencycontact)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case member.EdgeEmergencycontact:
		if id := m.emergencycontact; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedemergencycontact {
		edges = append(edges, member.EdgeEmergencycontact)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemberMutation) EdgeCleared(name string) bool {
	switch name {
	case member.EdgeEmergencycontact:
		return m.clearedemergencycontact
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemberMutation) ClearEdge(name string) error {
	switch name {
	case member.EdgeEmergencycontact:
		m.ClearEmergencycontact()
		return nil
	}
	return fmt.Errorf("unknown Member unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemberMutation) ResetEdge(name string) error {
	switch name {
	case member.EdgeEmergencycontact:
		m.ResetEmergencycontact()
		return nil
	}
	return fmt.Errorf("unknown Member edge %s", name)
}
