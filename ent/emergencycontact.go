// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/v1nidev/auge-service/ent/emergencycontact"
	"github.com/v1nidev/auge-service/ent/member"
)

// EmergencyContact is the model entity for the EmergencyContact schema.
type EmergencyContact struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// ContactName holds the value of the "contact_name" field.
	ContactName string `json:"contact_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmergencyContactQuery when eager-loading is set.
	Edges                   EmergencyContactEdges `json:"edges"`
	member_emergencycontact *int
	selectValues            sql.SelectValues
}

// EmergencyContactEdges holds the relations/edges for other nodes in the graph.
type EmergencyContactEdges struct {
	// Referrer holds the value of the referrer edge.
	Referrer *Member `json:"referrer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReferrerOrErr returns the Referrer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmergencyContactEdges) ReferrerOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.Referrer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Referrer, nil
	}
	return nil, &NotLoadedError{edge: "referrer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmergencyContact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emergencycontact.FieldID:
			values[i] = new(sql.NullInt64)
		case emergencycontact.FieldPhoneNumber, emergencycontact.FieldContactName:
			values[i] = new(sql.NullString)
		case emergencycontact.ForeignKeys[0]: // member_emergencycontact
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmergencyContact fields.
func (ec *EmergencyContact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emergencycontact.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int(value.Int64)
		case emergencycontact.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				ec.PhoneNumber = value.String
			}
		case emergencycontact.FieldContactName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_name", values[i])
			} else if value.Valid {
				ec.ContactName = value.String
			}
		case emergencycontact.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field member_emergencycontact", value)
			} else if value.Valid {
				ec.member_emergencycontact = new(int)
				*ec.member_emergencycontact = int(value.Int64)
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmergencyContact.
// This includes values selected through modifiers, order, etc.
func (ec *EmergencyContact) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryReferrer queries the "referrer" edge of the EmergencyContact entity.
func (ec *EmergencyContact) QueryReferrer() *MemberQuery {
	return NewEmergencyContactClient(ec.config).QueryReferrer(ec)
}

// Update returns a builder for updating this EmergencyContact.
// Note that you need to call EmergencyContact.Unwrap() before calling this method if this EmergencyContact
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EmergencyContact) Update() *EmergencyContactUpdateOne {
	return NewEmergencyContactClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EmergencyContact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EmergencyContact) Unwrap() *EmergencyContact {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmergencyContact is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EmergencyContact) String() string {
	var builder strings.Builder
	builder.WriteString("EmergencyContact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("phone_number=")
	builder.WriteString(ec.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("contact_name=")
	builder.WriteString(ec.ContactName)
	builder.WriteByte(')')
	return builder.String()
}

// EmergencyContacts is a parsable slice of EmergencyContact.
type EmergencyContacts []*EmergencyContact
