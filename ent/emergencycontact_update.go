// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/v1nidev/auge-service/ent/emergencycontact"
	"github.com/v1nidev/auge-service/ent/member"
	"github.com/v1nidev/auge-service/ent/predicate"
)

// EmergencyContactUpdate is the builder for updating EmergencyContact entities.
type EmergencyContactUpdate struct {
	config
	hooks    []Hook
	mutation *EmergencyContactMutation
}

// Where appends a list predicates to the EmergencyContactUpdate builder.
func (ecu *EmergencyContactUpdate) Where(ps ...predicate.EmergencyContact) *EmergencyContactUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetPhoneNumber sets the "phone_number" field.
func (ecu *EmergencyContactUpdate) SetPhoneNumber(s string) *EmergencyContactUpdate {
	ecu.mutation.SetPhoneNumber(s)
	return ecu
}

// SetContactName sets the "contact_name" field.
func (ecu *EmergencyContactUpdate) SetContactName(s string) *EmergencyContactUpdate {
	ecu.mutation.SetContactName(s)
	return ecu
}

// SetReferrerID sets the "referrer" edge to the Member entity by ID.
func (ecu *EmergencyContactUpdate) SetReferrerID(id int) *EmergencyContactUpdate {
	ecu.mutation.SetReferrerID(id)
	return ecu
}

// SetReferrer sets the "referrer" edge to the Member entity.
func (ecu *EmergencyContactUpdate) SetReferrer(m *Member) *EmergencyContactUpdate {
	return ecu.SetReferrerID(m.ID)
}

// Mutation returns the EmergencyContactMutation object of the builder.
func (ecu *EmergencyContactUpdate) Mutation() *EmergencyContactMutation {
	return ecu.mutation
}

// ClearReferrer clears the "referrer" edge to the Member entity.
func (ecu *EmergencyContactUpdate) ClearReferrer() *EmergencyContactUpdate {
	ecu.mutation.ClearReferrer()
	return ecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EmergencyContactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EmergencyContactUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EmergencyContactUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EmergencyContactUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *EmergencyContactUpdate) check() error {
	if v, ok := ecu.mutation.PhoneNumber(); ok {
		if err := emergencycontact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "EmergencyContact.phone_number": %w`, err)}
		}
	}
	if _, ok := ecu.mutation.ReferrerID(); ecu.mutation.ReferrerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmergencyContact.referrer"`)
	}
	return nil
}

func (ecu *EmergencyContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emergencycontact.Table, emergencycontact.Columns, sqlgraph.NewFieldSpec(emergencycontact.FieldID, field.TypeInt))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.PhoneNumber(); ok {
		_spec.SetField(emergencycontact.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := ecu.mutation.ContactName(); ok {
		_spec.SetField(emergencycontact.FieldContactName, field.TypeString, value)
	}
	if ecu.mutation.ReferrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emergencycontact.ReferrerTable,
			Columns: []string{emergencycontact.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emergencycontact.ReferrerTable,
			Columns: []string{emergencycontact.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emergencycontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// EmergencyContactUpdateOne is the builder for updating a single EmergencyContact entity.
type EmergencyContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmergencyContactMutation
}

// SetPhoneNumber sets the "phone_number" field.
func (ecuo *EmergencyContactUpdateOne) SetPhoneNumber(s string) *EmergencyContactUpdateOne {
	ecuo.mutation.SetPhoneNumber(s)
	return ecuo
}

// SetContactName sets the "contact_name" field.
func (ecuo *EmergencyContactUpdateOne) SetContactName(s string) *EmergencyContactUpdateOne {
	ecuo.mutation.SetContactName(s)
	return ecuo
}

// SetReferrerID sets the "referrer" edge to the Member entity by ID.
func (ecuo *EmergencyContactUpdateOne) SetReferrerID(id int) *EmergencyContactUpdateOne {
	ecuo.mutation.SetReferrerID(id)
	return ecuo
}

// SetReferrer sets the "referrer" edge to the Member entity.
func (ecuo *EmergencyContactUpdateOne) SetReferrer(m *Member) *EmergencyContactUpdateOne {
	return ecuo.SetReferrerID(m.ID)
}

// Mutation returns the EmergencyContactMutation object of the builder.
func (ecuo *EmergencyContactUpdateOne) Mutation() *EmergencyContactMutation {
	return ecuo.mutation
}

// ClearReferrer clears the "referrer" edge to the Member entity.
func (ecuo *EmergencyContactUpdateOne) ClearReferrer() *EmergencyContactUpdateOne {
	ecuo.mutation.ClearReferrer()
	return ecuo
}

// Where appends a list predicates to the EmergencyContactUpdate builder.
func (ecuo *EmergencyContactUpdateOne) Where(ps ...predicate.EmergencyContact) *EmergencyContactUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EmergencyContactUpdateOne) Select(field string, fields ...string) *EmergencyContactUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EmergencyContact entity.
func (ecuo *EmergencyContactUpdateOne) Save(ctx context.Context) (*EmergencyContact, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EmergencyContactUpdateOne) SaveX(ctx context.Context) *EmergencyContact {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EmergencyContactUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EmergencyContactUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *EmergencyContactUpdateOne) check() error {
	if v, ok := ecuo.mutation.PhoneNumber(); ok {
		if err := emergencycontact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "EmergencyContact.phone_number": %w`, err)}
		}
	}
	if _, ok := ecuo.mutation.ReferrerID(); ecuo.mutation.ReferrerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmergencyContact.referrer"`)
	}
	return nil
}

func (ecuo *EmergencyContactUpdateOne) sqlSave(ctx context.Context) (_node *EmergencyContact, err error) {
	if err := ecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emergencycontact.Table, emergencycontact.Columns, sqlgraph.NewFieldSpec(emergencycontact.FieldID, field.TypeInt))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmergencyContact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emergencycontact.FieldID)
		for _, f := range fields {
			if !emergencycontact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emergencycontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.PhoneNumber(); ok {
		_spec.SetField(emergencycontact.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.ContactName(); ok {
		_spec.SetField(emergencycontact.FieldContactName, field.TypeString, value)
	}
	if ecuo.mutation.ReferrerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emergencycontact.ReferrerTable,
			Columns: []string{emergencycontact.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.ReferrerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emergencycontact.ReferrerTable,
			Columns: []string{emergencycontact.ReferrerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmergencyContact{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emergencycontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
